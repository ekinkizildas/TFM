joy, trust, fear, anger, sadness, disgust, surprise, anticipation),
~ scale(.) %>% as.numeric()
))
model1 <- glm.nb(helpful_vote ~
verified_purchase + sentiment_score + bing_score + review_length +
rating + review_age + price + category ,
data = standardized_data)
summary(model1)
# Making a table
tidy(model1) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
ft1 <- modelsummary(model1,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc1 <- read_docx()
doc1 <- body_add_par(doc1, "Model 1: Baseline NB", style = "heading 1")
doc1 <- body_add_flextable(doc1, value = ft1)
print(doc1, target = "model1_output.docx")
# Negative Binomial with interaction
model2 <- glm.nb(helpful_vote ~
verified_purchase * sentiment_score + verified_purchase * bing_score +
rating + review_length + review_age + price + category,
data = standardized_data)
model2
tidy(model2) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
ft2 <- modelsummary(model2,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc2 <- read_docx()
doc2 <- body_add_par(doc1, "Model 2: Interaction NB", style = "heading 1")
doc2 <- body_add_flextable(doc1, value = ft1)
print(doc1, target = "model1_output.docx")
model3 <- glm.nb(helpful_vote ~ joy + trust + fear + anger + sadness + disgust + surprise + anticipation + verified_purchase + review_length + review_age + price + category,
data = standardized_data)
model3
ft_nrc <- modelsummary(
model3,
fmt = 3,                         # 3 ondalık basamak
statistic = "std.error",         # yalnızca std.error göster
stars = TRUE,                    # p-value'lara göre yıldız
output = "flextable"
) %>%
fontsize(size = 10, part = "all") %>%
padding(padding = 2, part = "all") %>%
align(align = "center", part = "all") %>%
set_table_properties(width = 0.95, layout = "autofit") %>%
font(fontname = "Times New Roman", part = "all")
doc <- read_docx() %>%
body_add_par("Table A2. Standardized Coefficients from NRC Emotion-Enriched Negative Binomial Model", style = "heading 2") %>%
body_add_flextable(ft_nrc) %>%
body_add_par("Note: All continuous predictors are z-standardized. Standard errors in parentheses. + p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001", style = "Normal")
# 3. Dışa aktar
print(doc, target = "Table_B3_NRC_Model.docx")
model4 <- glm.nb(helpful_vote ~
joy * verified_purchase +
trust * verified_purchase +
fear * verified_purchase +
anger * verified_purchase +
sadness * verified_purchase +
disgust * verified_purchase +
surprise * verified_purchase +
anticipation * verified_purchase +
review_length + rating + review_age + price + category,
data = standardized_data)
summary(model4)
tidy(model4) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model4,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model5 <- glm.nb(helpful_vote ~
joy * trust +
trust * verified_purchase +
sentiment_score * trust +
review_length + rating + review_age + price + category,
data = standardized_data)
summary(model5)
tidy(model5) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model5,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model6 <- glm.nb(helpful_vote ~
fear * sadness +
review_length + rating + review_age + price + category,
data = standardized_data)
summary(model6)
tidy(model6) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model6,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model7 <- glm.nb(helpful_vote ~
joy * review_length +
trust * review_length +
fear * review_length +
anger * review_length +
sadness * review_length +
disgust * review_length +
surprise * review_length +
anticipation * review_length +
review_length + rating + review_age + price + category,
data = standardized_data)
summary(model7)
tidy(model7) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model7,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model8 <- glm.nb(helpful_vote ~ sentiment_score * verified_purchase +
joy+ fear + positive + negative + rating + review_length +
review_age + price + category,
data = standardized_data)
summary(model8)
tidy(model8) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model8,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
vif(model8)
# glm.nb için
model9 <- glm.nb(helpful_vote ~ sentiment_score + bing_label + review_length + rating + verified_purchase, data = standardized_data)
summary(model9)
tidy(model9) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model9,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model10 <- glm.nb(helpful_vote ~ + bing_label + review_length + rating + sentiment_score * verified_purchase,
data = standardized_data)
summary(model10)
tidy(model10) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model10,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model11 <- glm.nb(helpful_vote ~
verified_purchase * sentiment_score +
verified_purchase * review_age +
review_length +
rating,
data = standardized_data)
summary(model11)
tidy(model11) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model11,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model12 <- glm.nb(helpful_vote ~
verified_purchase * sentiment_score +
review_length * sentiment_score +
verified_purchase * review_age +
verified_purchase * review_length +
bing_label +
rating,
data = standardized_data)
summary(model12)
tidy(model12) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model12,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model13 <- glm.nb(helpful_vote ~
verified_purchase * sentiment_score +
review_length * sentiment_score +
verified_purchase * review_age +
verified_purchase * review_length +
bing_label + sentiment_score * price +
rating,
data = standardized_data)
summary(model13)
tidy(model13) %>%
mutate(signif = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
)) %>%
dplyr::select(term, estimate, std.error, statistic, signif) %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
flextable() %>%
font(fontname = "Times New Roman", part = "all")
modelsummary(model13,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
model_zinb <- zeroinfl(helpful_vote ~ verified_purchase * sentiment_score +
review_length + review_age + rating + price,
dist = "negbin", data = standardized_data)
summary(model_zinb)
# Count model
count_coef <- coef(model_zinb, model = "count")
count_se <- sqrt(diag(vcov(model_zinb)))[1:length(count_coef)]
count_z <- count_coef / count_se
count_p <- 2 * (1 - pnorm(abs(count_z)))
count_df <- data.frame(
Model = "Count",
Term = names(count_coef),
Estimate = round(count_coef, 3),
Std.Error = round(count_se, 3),
z.value = round(count_z, 3),
p.value = round(count_p, 3),
Signif = case_when(
count_p < 0.001 ~ "***",
count_p < 0.01 ~ "**",
count_p < 0.05 ~ "*",
TRUE ~ ""
)
)
# Zero-inflation model
zero_coef <- coef(model_zinb, model = "zero")
zero_se <- sqrt(diag(vcov(model_zinb)))[(length(count_coef)+1):(length(count_coef)+length(zero_coef))]
zero_z <- zero_coef / zero_se
zero_p <- 2 * (1 - pnorm(abs(zero_z)))
zero_df <- data.frame(
Model = "Zero",
Term = names(zero_coef),
Estimate = round(zero_coef, 3),
Std.Error = round(zero_se, 3),
z.value = round(zero_z, 3),
p.value = round(zero_p, 3),
Signif = case_when(
zero_p < 0.001 ~ "***",
zero_p < 0.01 ~ "**",
zero_p < 0.05 ~ "*",
TRUE ~ ""
)
)
model_results <- bind_rows(count_df, zero_df)
model_results %>%
kable(caption = "ZINB Model Coefficients", booktabs = TRUE) %>%
kable_styling(full_width = FALSE)
ft3 <- modelsummary(model_zinb,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc3 <- read_docx()
doc3 <- body_add_par(doc1, "Model 3: ZINB", style = "heading 1")
doc3 <- body_add_flextable(doc1, value = ft1)
print(doc1, target = "model1_output.docx")
models <- list(
"Model 1: NB (Standardized)" = model1,
"Model 2: Interaction (Standardized)" =  model2,
"Model 3: ZINB (Standardized)"= model_zinb
)
ft <- modelsummary(models,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
ft <- ft %>%
fontsize(size = 11, part = "all") %>%
font(fontname = "Times New Roman", part = "all") %>%
align(align = "left", part = "all") %>%
set_table_properties(layout = "autofit") %>%
theme_booktabs()
ft <- ft %>%
colformat_num(digits = 3, big.mark = ",")
doc <- read_docx()
doc <- body_add_flextable(doc, value = ft)
print(doc, target = "final_model_table.docx")
models <- list(
"Model 1: Baseline NB" = model1,
"Model 2: Interaction" = model2,
"Model 3: ZINB" = model_zinb
)
p <- modelplot(models,
coef_omit = "(Intercept)|category",
conf_level = 0.95) +  # bu argüman gerekli
labs(title = "Coefficient Estimates Across Models",
x = "Coefficient Estimate", y = NULL) +
theme_minimal() +
theme(text = element_text(family = "Times New Roman"))
print(p)
models <- list(
"Model 1: Baseline NB"     = model1,
"Model 2: Verified × Sentiment" = model2,
"Model 3: NRC Emotions"    = model3,
"Model 4: Trust × Sentiment" = model5,
"Model 5: BING Labels"     = model9,
"Model 6: Moderated by Price" = model12,
"Model 7: Minimal Model"  = model13,
"ZINB Model"               = model_zinb
)
plot_obj <- modelplot(models,
coef_omit = "(Intercept)|category",
conf_level = 0.95) +
labs(title = "Coefficient Estimates Across Models",
x = "Coefficient Estimate", y = NULL) +
theme_minimal() +
theme(text = element_text(family = "Times New Roman"))
categories <- unique(standardized_data$category)
models_by_category <- map(
categories,
~ glm.nb(helpful_vote ~ verified_purchase + sentiment_score + review_length + review_age + rating + price,
data = filter(standardized_data, category == .x))
)
names(models_by_category) <- categories
table_cat <- modelsummary(
models_by_category,
fmt = 3,
stars = TRUE,
statistic = "std.error",
output = "flextable"
)
doc <- read_docx() %>%
body_add_par("Table A3. Category-wise Negative Binomial Models", style = "heading 2") %>%
body_add_flextable(table_cat) %>%
body_add_par("Note: All continuous variables are z-standardized. Standard errors in parentheses. + p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001", style = "Normal")
print(doc, target = "Table_A3_Category_Models.docx")
ft2 <- modelsummary(model2,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc2 <- read_docx()
doc2 <- body_add_par(doc1, "Model 2: Interaction NB", style = "heading 1")
doc2 <- body_add_flextable(doc1, value = ft1)
print(doc1, target = "model2_output.docx")
ft1 <- modelsummary(model1,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc1 <- read_docx()
doc1 <- body_add_par(doc1, "Model 1: Baseline NB", style = "heading 1")
doc1 <- body_add_flextable(doc1, value = ft1)
print(doc1, target = "model1_output.docx")
ft3 <- modelsummary(model_zinb,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc3 <- read_docx()
doc3 <- body_add_par(doc1, "Model 3: ZINB", style = "heading 1")
doc3 <- body_add_flextable(doc1, value = ft1)
print(doc3, target = "model3_output.docx")
ft3 <- modelsummary(model_zinb,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc3 <- read_docx()
doc3 <- body_add_par(doc1, "Model 3: ZINB", style = "heading 1")
doc3 <- body_add_flextable(doc3, value = ft1)
print(doc3, target = "model3_output.docx")
ft3 <- modelsummary(model_zinb,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc3 <- read_docx()
doc3 <- body_add_par(doc3, "Model 3: ZINB", style = "heading 1")
doc3 <- body_add_flextable(doc3, value = ft1)
print(doc3, target = "model3_output.docx")
ft2 <- modelsummary(model2,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
doc2 <- read_docx()
doc2 <- body_add_par(doc2, "Model 2: Interaction NB", style = "heading 1")
doc2 <- body_add_flextable(doc2, value = ft1)
print(doc2, target = "model2_output.docx")
models <- list(
"Model 1: NB (Standardized)" = model1,
"Model 2: Interaction (Standardized)" =  model2,
)
models <- list(
"Model 1: NB (Standardized)" = model1,
"Model 2: Interaction (Standardized)" =  model2
)
ft <- modelsummary(models,
fmt = 3,
statistic = "std.error",
stars = TRUE,
output = "flextable")
ft <- ft %>%
fontsize(size = 11, part = "all") %>%
font(fontname = "Times New Roman", part = "all") %>%
align(align = "left", part = "all") %>%
set_table_properties(layout = "autofit") %>%
theme_booktabs()
ft <- ft %>%
colformat_num(digits = 3, big.mark = ",")
doc <- read_docx()
doc <- body_add_flextable(doc, value = ft)
print(doc, target = "final_model_table.docx")
